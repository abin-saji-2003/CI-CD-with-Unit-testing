name: Go CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21  

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: go test ./... -coverprofile=coverage.out -v

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out

  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Build application
        run: go build -o app ./cmd/main.go

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: app-binary
          path: app

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Install SSH client and update system
        run: |
          sudo apt-get update -y
          sudo apt-get install -y openssh-client

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: app-binary
          path: ./

      - name: Set up SSH keys with ssh-agent
        run: |
          mkdir -p ~/.ssh  # Ensure the .ssh directory exists
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa
          echo "Host *" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config

      - name: Deploy to Server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          USERNAME: ${{ secrets.SERVER_USER }}
        run: |
          echo "Starting deployment..."
          ssh -i ~/.ssh/id_rsa $USERNAME@$SERVER_IP << 'EOF'
            set -e
            echo "Navigating to the project directory..."
            cd /home/ubuntu/CI-CD-with-Unit-testing
            git pull origin main
            go mod tidy
            go build -o app ./cmd/main.go
            go test ./... -v
            sudo systemctl stop app || echo "Service not running"
          EOF

      - name: Deploy binary to server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          USERNAME: ${{ secrets.SERVER_USER }}
        run: |
          scp app $USERNAME@$SERVER_IP:/home/$USERNAME/app

      - name: Restart application on server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          USERNAME: ${{ secrets.SERVER_USER }}
        run: |
          ssh -i ~/.ssh/id_rsa $USERNAME@$SERVER_IP "sudo systemctl start app"

      - name: Verify Deployment
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "systemctl status app --no-pager"