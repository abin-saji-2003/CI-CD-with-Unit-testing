name: Go CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21  

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: go test ./... -coverprofile=coverage.out -v

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out

  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Build application
        run: go build -o app ./cmd/main.go

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: app-binary
          path: app

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: app-binary
          path: ./

      - name: Create .ssh directory
        run: mkdir -p ~/.ssh

      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          USERNAME: ${{ secrets.SERVER_USER }}
        run: |
          echo "Starting deployment..."
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Step 1: SSH into EC2 and Pull Latest Code
          echo "Pulling latest code from Git..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $USERNAME@$SERVER_IP << 'EOF'
            cd /home/ubuntu/CI-CD-with-Unit-testing
            git pull origin main
          EOF

          # Step 2: Ensure Go is in PATH and Install Dependencies
          echo "Ensuring Go is in PATH and installing dependencies..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $USERNAME@$SERVER_IP << 'EOF'
            # Ensure Go is in PATH
            echo "export PATH=\$PATH:/usr/local/go/bin" >> ~/.bashrc
            source ~/.bashrc

            # Verify Go is available
            go version
            
            # Install dependencies and build
            cd /home/ubuntu/CI-CD-with-Unit-testing
            go mod tidy
            go build -o app ./cmd/main.go
          EOF

          # Step 3: Stop Existing Service
          echo "Stopping the app..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $USERNAME@$SERVER_IP "sudo systemctl stop myapp || echo 'Service not running'"

          # Step 4: Deploy New Binary
          echo "Deploying new binary..."
          scp app $USERNAME@$SERVER_IP:/home/$USERNAME/app

          # Step 5: Start Application Service
          echo "Starting the app..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $USERNAME@$SERVER_IP "sudo systemctl start myapp"

      - name: Verify Deployment
        run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "systemctl status myapp --no-pager"
