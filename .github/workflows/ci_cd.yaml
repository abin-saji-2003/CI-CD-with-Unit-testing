name: Go CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: go test ./... -coverprofile=coverage.out -v

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out

  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Build application
        run: go build -o app ./cmd/main.go

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: app-binary
          path: app

  deploy:
    runs-on: ubuntu-latest
    steps:

      # Step 1: Setup SSH Key
      - name: Setup SSH Key
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" | base64 --decode > s.pem
          chmod 400 s.pem

      # Step 2: Connect to EC2 and Pull Latest Code
      - name: Pull Latest Code from Git
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          ssh -i s.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'EOF'
            echo "Current directory content:"
            ls -al /home/ubuntu/CI-CD-with-Unit-testing
            cd /home/ubuntu/CI-CD-with-Unit-testing
            git pull origin main
          EOF

      # Step 3: Build Go Application
      - name: Testing and Building Go Application
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          ssh -i s.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'EOF'
            # Update system packages
            sudo apt update
            sudo apt install -y golang-go

            # Verify Go installation
            go version

            # Navigate to the project directory and build the app
            cd /home/ubuntu/CI-CD-with-Unit-testing
            go mod tidy
            go test ./... -v
            go build -o app ./cmd/main.go
          EOF

      # Step 4: Restart Application Service
      - name: Restart Application Service
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          ssh -i s.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'EOF'
            echo "Restarting application service..."
            sudo systemctl restart app
          EOF

      # Step 5: Cleanup SSH Key
      - name: Cleanup
        run: |
          rm -f s.pem
